# ‚úÖ –ü–æ–≤–Ω–∏–π –æ–Ω–æ–≤–ª–µ–Ω–∏–π bot.py –∑ /start, /help, /predict, GPT, Binance, FastAPI, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º –¥–æ—Å—Ç—É–ø–æ–º, –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é
# ‚öôÔ∏è –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: python-telegram-bot[fast], openai, python-dotenv, httpx, requests, apscheduler

import os
import asyncio
import datetime
import logging
import requests
import openai
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from config import (
    BOT_TOKEN, OWNER_ID, BOT_USERNAME,
    CRYPTOPANIC_API_KEY
)
from db import add_or_update_user, get_user_profile, get_all_users, remove_user

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
fastapi_app = FastAPI()

LANGUAGES = {"uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}
user_lang = {}
def lang(uid): return user_lang.get(uid, "uk")

def tr(uid, key):
    return {
        "access_status": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω–∏–π, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", "en": "‚úÖ Access active, {days} days left"},
        "no_access": {"uk": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.", "ru": "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.", "en": "‚ùå No active subscription."},
    }[key][lang(uid)]

@fastapi_app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# --- –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó /start —ñ /help ---

async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_lang.setdefault(uid, "uk")
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –¶–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
    )
    logging.info(f"/start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}")

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (
        "/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é\n"
        "/myaccess ‚Äî –º—ñ–π –¥–æ—Å—Ç—É–ø\n"
        "/help ‚Äî –∫–æ–º–∞–Ω–¥–∏\n"
        "/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n"
        "/ask ‚Äî GPT\n"
        "/testask ‚Äî —Ç–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ (–∞–¥–º—ñ–Ω)\n"
        "/price ‚Äî —Ü—ñ–Ω–∏\n"
        "/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –∫—Ä–∏–ø—Ç–∏"
    )
    await update.message.reply_text(text)
    logging.info(f"/help –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}")

# --- –Ü—Å–Ω—É—é—á—ñ –∫–æ–º–∞–Ω–¥–∏ ---

async def ask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID and not get_user_profile(uid):
        await update.message.reply_text(tr(uid, "no_access"))
        return
    q = " ".join(ctx.args)
    if not q:
        await update.message.reply_text("ü§ñ –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ask")
        return
    logging.info(f"/ask –≤—ñ–¥ {uid}: {q}")
    res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": q}])
    await update.message.reply_text(res.choices[0].message.content[:4000])

async def testask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    q = " ".join(ctx.args)
    if not q:
        await update.message.reply_text("ü§ñ –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç-–∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /testask")
        return
    res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": q}])
    await update.message.reply_text("üß™ Test Answer:\n" + res.choices[0].message.content[:4000])

async def predict_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID and not get_user_profile(uid):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
        return
    if not ctx.args:
        await update.message.reply_text("üìä –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: /predict BTCUSDT")
        return
    symbol = ctx.args[0].upper()
    try:
        data = requests.get(f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}").json()
        prompt = (
            f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {data['lastPrice']}\n"
            f"–ó–º—ñ–Ω–∞ –∑–∞ 24h: {data['priceChangePercent']}%\n"
            f"–û–± º—î–º: {data['volume']}\n"
            f"–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö –¥–∞–Ω–∏—Ö —Å–ø—Ä–æ–≥–Ω–æ–∑—É–π, —á–∏ –≤–∞—Ä—Ç–æ –∫—É–ø—É–≤–∞—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞–≤–∞—Ç–∏."
        )
        res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
        await update.message.reply_text(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {symbol}:\n{res.choices[0].message.content[:4000]}")
    except Exception as e:
        logging.error(f"Error in /predict: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–±–æ –ø—Ä–æ–≥–Ω–æ–∑—É.")

async def price_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    data = requests.get("https://api.binance.com/api/v3/ticker/price?symbols=[\"BTCUSDT\",\"ETHUSDT\"]").json()
    await update.message.reply_text("üí± –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n" + "\n".join(f"{d['symbol']}: {d['price']}" for d in data))

async def myaccess_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid == OWNER_ID:
        add_or_update_user(uid, 3650)  # 10 —Ä–æ–∫—ñ–≤
    row = get_user_profile(uid)
    if row:
        days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
        await update.message.reply_text(tr(uid, "access_status").format(days=days))
    else:
        await update.message.reply_text(tr(uid, "no_access"))

async def admin_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õî Access denied.")
        return
    users = get_all_users()
    active = sum(datetime.datetime.fromisoformat(exp) > datetime.datetime.now() for _, exp in users)
    inactive = len(users) - active
    await update.message.reply_text(f"üë• Users: {len(users)}\n‚úÖ Active: {active}\n‚ùå Inactive: {inactive}")

async def check_expiry(_):
    now = datetime.datetime.now()
    for uid, exp in get_all_users():
        dt = datetime.datetime.fromisoformat(exp)
        if (dt - now).days == 1:
            await telegram_app.bot.send_message(uid, "‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø—ñ–¥–ø–∏—Å–∫–∞.")
        if dt < now:
            remove_user(uid)

from uvicorn import Config, Server

async def main():
    telegram_app.add_handler(CommandHandler("start", start_cmd))
    telegram_app.add_handler(CommandHandler("help", help_cmd))
    telegram_app.add_handler(CommandHandler("ask", ask_cmd))
    telegram_app.add_handler(CommandHandler("testask", testask_cmd))
    telegram_app.add_handler(CommandHandler("predict", predict_cmd))
    telegram_app.add_handler(CommandHandler("price", price_cmd))
    telegram_app.add_handler(CommandHandler("myaccess", myaccess_cmd))
    telegram_app.add_handler(CommandHandler("admin", admin_cmd))
    telegram_app.job_queue.run_repeating(check_expiry, interval=3600)
    await telegram_app.initialize()

    config = Config(fastapi_app, host="0.0.0.0", port=8000)
    server = Server(config)

    await asyncio.gather(
        telegram_app.start(),
        server.serve()
    )

if __name__ == "__main__":
    asyncio.run(main())
