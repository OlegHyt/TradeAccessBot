import os
import asyncio
import datetime
import logging
import requests
import httpx
import openai
import uvicorn
import sqlite3
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from config import (
    BOT_TOKEN, BOT_USERNAME, CRYPTO_PAY_TOKEN,
    CHANNEL_CHAT_ID, CHANNEL_LINK, TARIFFS,
    OWNER_ID, CRYPTOPANIC_API_KEY, OPENAI_API_KEY
)
from db import add_or_update_user, get_user_profile, get_all_users, remove_user

load_dotenv()
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
fastapi_app = FastAPI()

# GPT usage DB
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS gpt_usage (
    user_id INTEGER,
    date TEXT,
    prompt TEXT,
    tokens INTEGER DEFAULT 0
)
""")
conn.commit()

LANGUAGES = {"uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}

TEXT = {
    "choose_lang": {
        "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", "en": "Choose your language:"
    },
    "main_menu": {
        "uk": "–í—ñ—Ç–∞—é, {name}!\n–û–±–µ—Ä—ñ—Ç—å:", "ru": "–ü—Ä–∏–≤–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ:", "en": "Welcome, {name}!\nChoose:"
    },
    "buttons": {
        "access": {"uk": "üìä –ú—ñ–π –¥–æ—Å—Ç—É–ø", "ru": "üìä –ú–æ–π –¥–æ—Å—Ç—É–ø", "en": "üìä My Access"},
        "subscribe": {"uk": "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "ru": "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "en": "üîÅ Renew Subscription"},
        "freetrial": {"uk": "üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É", "ru": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 1 —á–∞—Å", "en": "üéÅ Free 1-hour trial"},
        "news": {"uk": "üì∞ –ù–æ–≤–∏–Ω–∏", "ru": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "en": "üì∞ News"},
        "commands": {"uk": "üìå –ö–æ–º–∞–Ω–¥–∏", "ru": "üìå –ö–æ–º–∞–Ω–¥—ã", "en": "üìå Commands"},
        "admin": {"uk": "‚öôÔ∏è –ê–¥–º—ñ–Ω", "ru": "‚öôÔ∏è –ê–¥–º–∏–Ω", "en": "‚öôÔ∏è Admin"},
        "back": {"uk": "üîô –ù–∞–∑–∞–¥", "ru": "üîô –ù–∞–∑–∞–¥", "en": "üîô Back"},
        "gpt": {"uk": "üß† GPT", "ru": "üß† GPT", "en": "üß† GPT"},
    },
    "commands_list": {
        "uk": "/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é\n/myaccess ‚Äî –º—ñ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥–∏\n/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç –¥–ª—è –∞–¥–º—ñ–Ω–∞\n/price ‚Äî —Ü—ñ–Ω–∏\n/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–Ω–µ—Ç—ñ\n/broadcast ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ (admin)",
        "ru": "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/myaccess ‚Äî –º–æ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥—ã\n/admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞\n/price ‚Äî —Ü–µ–Ω—ã\n/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–Ω–µ—Ç–µ\n/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ (admin)",
        "en": "/start ‚Äî main menu\n/myaccess ‚Äî my access\n/help ‚Äî commands\n/admin ‚Äî admin panel\n/ask ‚Äî GPT\n/testask ‚Äî admin test\n/price ‚Äî prices\n/predict ‚Äî coin forecast\n/broadcast ‚Äî broadcast"
    },
    "choose_tariff": {"uk": "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", "en": "Choose tariff:"},
    "pay_success": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", "en": "‚úÖ Access activated!"},
    "not_subscribed": {"uk": "‚ùå –ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è: ", "ru": "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: ", "en": "‚ùå Not subscribed. Subscribe: "},
    "access_status": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω–∏–π, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", "en": "‚úÖ Access active, {days} days left"},
    "no_access": {"uk": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.", "ru": "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.", "en": "‚ùå No active subscription."},
    "predict_usage": {"uk": "üìä –ù–∞–ø–∏—à—ñ—Ç—å /predict BTCUSDT", "ru": "üìä –ù–∞–ø–∏—à–∏—Ç–µ /predict BTCUSDT", "en": "üìä Write /predict BTCUSDT"},
    "predict_error": {"uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É.", "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.", "en": "‚ùå Forecast error."},
    "gpt_limit": {"uk": "‚ö†Ô∏è –í–∏—á–µ—Ä–ø–∞–Ω–æ 5 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.", "ru": "‚ö†Ô∏è –õ–∏–º–∏—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.", "en": "‚ö†Ô∏è You used 5 GPT requests today."},
    "ask_prompt": {"uk": "üß† –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–æ GPT:", "ru": "üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ GPT:", "en": "üß† Enter your GPT prompt:"},
    "ask_cancel": {"uk": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "ru": "‚ùå –û—Ç–º–µ–Ω–∞", "en": "‚ùå Cancel"},
    "ask_no_access": {"uk": "‚ùå –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è GPT –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞.", "ru": "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPT –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.", "en": "‚ùå Active subscription required to use GPT."},
    "admin_access_denied": {"uk": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", "ru": "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", "en": "‚õî Access denied."}
}

user_lang = {}
def lang(uid): return user_lang.get(uid, "uk")
def tr(uid, key): return TEXT[key][lang(uid)]

# GPT usage check
def can_use_gpt(uid):
    today = datetime.date.today().isoformat()
    cursor.execute("SELECT COUNT(*) FROM gpt_usage WHERE user_id=? AND date=?", (uid, today))
    count = cursor.fetchone()[0]
    return count < 5

def log_gpt_usage(uid, prompt, tokens=0):
    today = datetime.date.today().isoformat()
    cursor.execute("INSERT INTO gpt_usage (user_id, date, prompt, tokens) VALUES (?, ?, ?, ?)", (uid, today, prompt, tokens))
    conn.commit()

@fastapi_app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    if "payload" in data:
        uid, key = data["payload"].split(":")
        add_or_update_user(int(uid), TARIFFS[key]["duration_days"])
        return {"ok": True}
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(name, callback_data=f"lang:{code}")] for code, name in LANGUAGES.items()]
    await update.message.reply_text(TEXT["choose_lang"]["uk"], reply_markup=InlineKeyboardMarkup(kb))

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(TEXT["commands_list"][lang(uid)])

async def myaccess_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid == OWNER_ID:
        await update.message.reply_text("‚úÖ –í–∏ ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å.")
        return
    row = get_user_profile(uid)
    if row:
        days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
        await update.message.reply_text(tr(uid, "access_status").format(days=days))
    else:
        await update.message.reply_text(tr(uid, "no_access"))

async def admin_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID:
        return await update.message.reply_text(TEXT["admin_access_denied"][lang(uid)])
    users = get_all_users()
    now = datetime.datetime.now()
    active = sum(1 for _, e in users if datetime.datetime.fromisoformat(e) > now)
    inactive = len(users) - active
    msg = f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {inactive}"
    await update.message.reply_text(msg)

async def ask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID and not get_user_profile(uid):
        return await update.message.reply_text(tr(uid, "no_access"))
    if not can_use_gpt(uid):
        return await update.message.reply_text(tr(uid, "gpt_limit"))
    q = " ".join(ctx.args)
    if not q:
        return await update.message.reply_text("ü§ñ –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ask")
    res = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": q}]
    )
    answer = res.choices[0].message.content
    log_gpt_usage(uid, q)
    await update.message.reply_text(answer[:4000])

async def testask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
    q = " ".join(ctx.args)
    res = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": q or "Hello!"}]
    )
    await update.message.reply_text(res.choices[0].message.content[:4000])

async def broadcast_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
    text = " ".join(ctx.args)
    users = get_all_users()
    count = 0
    for uid, _ in users:
        try:
            await telegram_app.bot.send_message(uid, text)
            count += 1
        except:
            pass
    await update.message.reply_text(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

async def price_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    r = requests.get("https://api.binance.com/api/v3/ticker/price?symbols=[\"BTCUSDT\",\"ETHUSDT\"]")
    data = r.json()
    msg = "\n".join(f"{d['symbol']}: {d['price']}" for d in data)
    await update.message.reply_text(f"üí± –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n{msg}")

async def predict_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID and not get_user_profile(uid):
        return await update.message.reply_text(tr(uid, "no_access"))
    if not ctx.args:
        return await update.message.reply_text(tr(uid, "predict_usage"))
    symbol = ctx.args[0].upper()
    try:
        r = requests.get(f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}")
        d = r.json()
        prompt = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {symbol}:\n–¶—ñ–Ω–∞: {d['lastPrice']}, –ó–º—ñ–Ω–∞: {d['priceChangePercent']}%, –û–± º—î–º: {d['volume']}."
        res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
        await update.message.reply_text(res.choices[0].message.content[:4000])
    except Exception as e:
        logging.error(e)
        await update.message.reply_text(tr(uid, "predict_error"))

user_state = {}

async def show_main_menu(update_or_query, ctx):
    if isinstance(update_or_query, Update):
        uid = update_or_query.effective_user.id
        first_name = update_or_query.effective_user.first_name
        send_func = update_or_query.message.reply_text
    else:  # CallbackQuery
        uid = update_or_query.from_user.id
        first_name = update_or_query.from_user.first_name
        send_func = update_or_query.edit_message_text

    code = lang(uid)
    kb = [
        [InlineKeyboardButton(TEXT["buttons"]["access"][code], callback_data="myaccess")],
        [InlineKeyboardButton(TEXT["buttons"]["subscribe"][code], callback_data="subscribe")],
        [InlineKeyboardButton(TEXT["buttons"]["freetrial"][code], callback_data="freetrial")],
        [InlineKeyboardButton(TEXT["buttons"]["news"][code], callback_data="news")],
        [InlineKeyboardButton(TEXT["buttons"]["gpt"][code], callback_data="gpt_start")],
        [InlineKeyboardButton(TEXT["buttons"]["commands"][code], callback_data="commands")],
    ]
    if uid == OWNER_ID:
        kb.append([InlineKeyboardButton(TEXT["buttons"]["admin"][code], callback_data="admin")])
    await send_func(TEXT["main_menu"][code].format(name=first_name), reply_markup=InlineKeyboardMarkup(kb))

async def handle_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = q.data

    code = lang(uid)

    if data.startswith("lang:"):
        code = data.split(":")[1]
        user_lang[uid] = code
        await show_main_menu(q, ctx)

    elif data == "myaccess":
        if uid == OWNER_ID:
            await q.edit_message_text("‚úÖ –í–∏ ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å.")
        else:
            row = get_user_profile(uid)
            if row:
                days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
                await q.edit_message_text(TEXT["access_status"][code].format(days=days))
            else:
                await q.edit_message_text(TEXT["no_access"][code])

    elif data == "subscribe":
        kb = [[InlineKeyboardButton(TARIFFS[k]["labels"][code], callback_data=k)] for k in TARIFFS]
        kb.append([InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")])
        await q.edit_message_text(TEXT["choose_tariff"][code], reply_markup=InlineKeyboardMarkup(kb))

    elif data in TARIFFS:
        t = TARIFFS[data]
        ctx.user_data["tdays"] = t["duration_days"]
        resp = requests.post("https://pay.crypt.bot/api/createInvoice", json={
            "asset": "USDT", "amount": t["amount"],
            "description": f"{t['duration_days']} days",
            "paid_btn_name": "openBot",
            "paid_btn_url": f"https://t.me/{BOT_USERNAME}",
            "payload": f"{uid}:{data}"
        }, headers={"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN})
        rj = resp.json()
        if rj.get("ok"):
            url = rj["result"]["pay_url"]
            kb = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data="check")],
                  [InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]
            await q.edit_message_text(f"üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å —Ç—É—Ç:\n{url}", reply_markup=InlineKeyboardMarkup(kb))
        else:
            await q.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")

    elif data == "check":
        try:
            m = await ctx.bot.get_chat_member(CHANNEL_CHAT_ID, uid)
            if m.status in ["member", "administrator", "creator"]:
                add_or_update_user(uid, ctx.user_data.get("tdays", 30))
                await q.edit_message_text(TEXT["pay_success"][code])
            else:
                raise Exception()
        except:
            await q.edit_message_text(TEXT["not_subscribed"][code] + CHANNEL_LINK)

    elif data == "freetrial":
        add_or_update_user(uid, 0.0417)
        await q.edit_message_text("‚úÖ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥–∏–Ω—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]))

    elif data == "news":
        await send_news(uid)
        await q.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]))

    elif data == "gpt_start":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
        if uid != OWNER_ID and not get_user_profile(uid):
            await q.edit_message_text(TEXT["ask_no_access"][code], reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]))
            return
        user_state[uid] = "awaiting_gpt"
        await q.edit_message_text(TEXT["ask_prompt"][code], reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(TEXT["ask_cancel"][code], callback_data="back_to_main")]]))

    elif data == "back_to_main":
        if uid in user_state:
            user_state.pop(uid)
        await show_main_menu(q, ctx)

    elif data == "admin":
        if uid != OWNER_ID:
            await q.edit_message_text(TEXT["admin_access_denied"][code])
            return
        users = get_all_users()
        now = datetime.datetime.now()
        active = sum(1 for _, e in users if datetime.datetime.fromisoformat(e) > now)
        inactive = len(users) - active
        msg = f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {inactive}"
        kb = [[InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]
        await q.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(kb))

    elif data == "commands":
        kb = [[InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")]]
        await q.edit_message_text(TEXT["commands_list"][code], reply_markup=InlineKeyboardMarkup(kb))

async def text_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if user_state.get(uid) == "awaiting_gpt":
        if uid != OWNER_ID and not get_user_profile(uid):
            await update.message.reply_text(TEXT["ask_no_access"][lang(uid)])
            user_state.pop(uid, None)
            return
        if not can_use_gpt(uid):
            await update.message.reply_text(TEXT["gpt_limit"][lang(uid)])
            user_state.pop(uid, None)
            return

        prompt = update.message.text
        if not prompt.strip():
            await update.message.reply_text("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ù–∞–∑–∞–¥.")
            return

        await update.message.reply_text("‚è≥ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...")
        try:
            res = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}]
            )
            answer = res.choices[0].message.content
            log_gpt_usage(uid, prompt)
            await update.message.reply_text(answer[:4000])
        except Exception as e:
            logging.error(e)
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")
        user_state.pop(uid, None)
    else:
        # –Ü–Ω—à—ñ —Ç–µ–∫—Å—Ç–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ –∞–±–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ —ñ–Ω—à–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
        pass

async def send_news(uid):
    # –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω —ñ–∑ CryptoPanic —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await telegram_app.bot.send_message(uid, "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø–æ–∫–∏ —â–æ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ.")

def main():
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help", help_cmd))
    telegram_app.add_handler(CommandHandler("myaccess", myaccess_cmd))
    telegram_app.add_handler(CommandHandler("admin", admin_cmd))
    telegram_app.add_handler(CommandHandler("ask", ask_cmd))
    telegram_app.add_handler(CommandHandler("testask", testask_cmd))
    telegram_app.add_handler(CommandHandler("broadcast", broadcast_cmd))
    telegram_app.add_handler(CommandHandler("price", price_cmd))
    telegram_app.add_handler(CommandHandler("predict", predict_cmd))
    telegram_app.add_handler(CallbackQueryHandler(handle_cb))
    telegram_app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), text_handler))
    telegram_app.run_polling()

if __name__ == "__main__":
    main()
