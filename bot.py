# ‚úÖ –ü–æ–≤–Ω–∏–π —Ä–æ–±–æ—á–∏–π bot.py (GPT-4o, Binance, FastAPI, GPT, CryptoPanic)
# ‚öôÔ∏è –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: python-telegram-bot[fast], openai, python-dotenv, httpx, requests, apscheduler

import os
import asyncio
import datetime
import logging
import requests
import httpx
import openai
import uvicorn
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from config import (
    BOT_TOKEN, BOT_USERNAME, CRYPTO_PAY_TOKEN,
    CHANNEL_CHAT_ID, CHANNEL_LINK, TARIFFS,
    OWNER_ID, CRYPTOPANIC_API_KEY, OPENAI_API_KEY
)
from db import add_or_update_user, get_user_profile, get_all_users, remove_user

load_dotenv()
openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
fastapi_app = FastAPI()

LANGUAGES = {"uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}

TEXT = {
    "choose_lang": {
        "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Choose your language:"
    },
    "main_menu": {
        "uk": "–í—ñ—Ç–∞—é, {name}!\n–û–±–µ—Ä—ñ—Ç—å:",
        "ru": "–ü—Ä–∏–≤–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ:",
        "en": "Welcome, {name}!\nChoose:"
    },
    "buttons": {
        "access": {"uk": "üìä –ú—ñ–π –¥–æ—Å—Ç—É–ø", "ru": "üìä –ú–æ–π –¥–æ—Å—Ç—É–ø", "en": "üìä My Access"},
        "subscribe": {"uk": "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "ru": "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "en": "üîÅ Renew Subscription"},
        "freetrial": {"uk": "üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É", "ru": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 1 —á–∞—Å", "en": "üéÅ Free 1-hour trial"},
        "news": {"uk": "üì∞ –ù–æ–≤–∏–Ω–∏", "ru": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "en": "üì∞ News"},
        "commands": {"uk": "üìå –ö–æ–º–∞–Ω–¥–∏", "ru": "üìå –ö–æ–º–∞–Ω–¥—ã", "en": "üìå Commands"},
    },
    "commands_list": {
        "uk": "/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é\n/myaccess ‚Äî –º—ñ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥–∏\n/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç –¥–ª—è –∞–¥–º—ñ–Ω–∞\n/price ‚Äî —Ü—ñ–Ω–∏",
        "ru": "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/myaccess ‚Äî –º–æ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥—ã\n/admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞\n/price ‚Äî —Ü–µ–Ω—ã",
        "en": "/start ‚Äî main menu\n/myaccess ‚Äî my access\n/help ‚Äî commands\n/admin ‚Äî admin panel\n/ask ‚Äî GPT\n/testask ‚Äî admin test\n/price ‚Äî prices"
    },
    "choose_tariff": {"uk": "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", "en": "Choose tariff:"},
    "pay_success": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", "en": "‚úÖ Access activated!"},
    "not_subscribed": {"uk": "‚ùå –ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è: ", "ru": "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: ", "en": "‚ùå Not subscribed. Subscribe: "},
    "access_status": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω–∏–π, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", "en": "‚úÖ Access active, {days} days left"},
    "no_access": {"uk": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.", "ru": "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.", "en": "‚ùå No active subscription."},
}

user_lang = {}
def lang(uid): return user_lang.get(uid, "uk")
def tr(uid, key): return TEXT[key][lang(uid)]

@fastapi_app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()

    if "payload" in data:
        uid, key = data["payload"].split(":")
        add_or_update_user(int(uid), TARIFFS[key]["duration_days"])
        return {"ok": True}

    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(name, callback_data=f"lang:{code}")] for code, name in LANGUAGES.items()]
    await update.message.reply_text(TEXT["choose_lang"]["uk"], reply_markup=InlineKeyboardMarkup(kb))

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(TEXT["commands_list"][lang(uid)])

async def myaccess_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    row = get_user_profile(uid)
    if row:
        days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
        await update.message.reply_text(tr(uid, "access_status").format(days=days))
    else:
        await update.message.reply_text(tr(uid, "no_access"))

async def admin_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID:
        await update.message.reply_text("‚õî Access denied.")
        return
    text = update.message.text
    users = get_all_users()
    active, inactive = 0, 0
    now = datetime.datetime.now()

    for _, exp in users:
        if datetime.datetime.fromisoformat(exp) > now:
            active += 1
        else:
            inactive += 1

    msg = f"üë• Users: {len(users)}\n‚úÖ Active: {active}\n‚ùå Inactive: {inactive}"

    if " " in text:
        q = text.split(" ", 1)[1].strip()
        for u, exp in users:
            try:
                chat = await ctx.bot.get_chat(u)
                name = f"{chat.first_name or ''} {chat.last_name or ''}".strip()
                if q.lower() in name.lower() or q == str(u):
                    left = (datetime.datetime.fromisoformat(exp) - now).days
                    msg += f"\n\nüîç Found: {name}\nID: {u}\n‚è≥ Days left: {max(0, left)}"
                    break
            except:
                pass
        else:
            msg += "\n\nüö´ Not found."

    await update.message.reply_text(msg)

async def ask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID and not get_user_profile(uid):
        await update.message.reply_text(tr(uid, "no_access"))
        return
    q = " ".join(ctx.args)
    if not q:
        await update.message.reply_text("ü§ñ –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ask")
        return
    res = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": q}]
    )
    answer = res.choices[0].message.content
    await update.message.reply_text(answer[:4000])

async def testask_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID:
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω–∞.")
        return
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞!")

async def price_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    r = requests.get("https://api.binance.com/api/v3/ticker/price?symbols=[\"BTCUSDT\",\"ETHUSDT\"]")
    data = r.json()
    msg = "\n".join(f"{d['symbol']}: {d['price']}" for d in data)
    await update.message.reply_text(f"üí± –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏:\n{msg}")

async def handle_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = q.data

    if data.startswith("lang:"):
        code = data.split(":")[1]
        user_lang[uid] = code
        name = q.from_user.first_name
        kb = [[InlineKeyboardButton(TEXT["buttons"][k][code], callback_data=k)] for k in ["access", "subscribe", "freetrial", "news", "commands"]]
        await q.edit_message_text(TEXT["main_menu"][code].format(name=name), reply_markup=InlineKeyboardMarkup(kb))

    elif data == "subscribe":
        code = lang(uid)
        kb = [[InlineKeyboardButton(TARIFFS[k]["labels"][code], callback_data=k)] for k in TARIFFS]
        await q.edit_message_text(TEXT["choose_tariff"][code], reply_markup=InlineKeyboardMarkup(kb))

    elif data in TARIFFS:
        t = TARIFFS[data]
        ctx.user_data["tdays"] = t["duration_days"]
        resp = requests.post("https://pay.crypt.bot/api/createInvoice", json={
            "asset": "USDT", "amount": t["amount"],
            "description": f"{t['duration_days']} days",
            "paid_btn_name": "openBot",
            "paid_btn_url": f"https://t.me/{BOT_USERNAME}",
            "payload": f"{uid}:{data}"
        }, headers={"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN})
        rj = resp.json()
        if rj.get("ok"):
            url = rj["result"]["pay_url"]
            kb = [[InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data="check")]]
            await q.edit_message_text(f"üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å —Ç—É—Ç:\n{url}", reply_markup=InlineKeyboardMarkup(kb))
        else:
            await q.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")

    elif data == "check":
        try:
            m = await ctx.bot.get_chat_member(CHANNEL_CHAT_ID, uid)
            if m.status in ["member", "administrator", "creator"]:
                add_or_update_user(uid, ctx.user_data.get("tdays", 30))
                await q.edit_message_text(tr(uid, "pay_success"))
            else:
                raise Exception()
        except:
            await q.edit_message_text(tr(uid, "not_subscribed") + CHANNEL_LINK)

    elif data == "access":
        row = get_user_profile(uid)
        if row:
            days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
            await q.edit_message_text(tr(uid, "access_status").format(days=days))
        else:
            await q.edit_message_text(tr(uid, "no_access"))

    elif data == "freetrial":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞—î–º–æ –¥–æ—Å—Ç—É–ø 1 –¥–µ–Ω—å (–∞–±–æ 1 –≥–æ–¥–∏–Ω–∞)
        add_or_update_user(uid, 1)
        await q.edit_message_text("‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥–∏–Ω—É!")

    elif data == "news":
        await send_news(uid)

    elif data == "commands":
        await q.edit_message_text(TEXT["commands_list"][lang(uid)])

async def send_news(uid):
    async with httpx.AsyncClient() as cli:
        r = await cli.get("https://cryptopanic.com/api/developer/v2/posts/",
                          params={"auth_token": CRYPTOPANIC_API_KEY, "public": "true", "kind": "news"})
        posts = r.json().get("results", [])[:3]
    msg = "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + "\n".join(f"{i+1}. {p['title']}" for i, p in enumerate(posts))
    await telegram_app.bot.send_message(uid, msg)

async def check_expiry(_):
    now = datetime.datetime.now()
    for uid, exp in get_all_users():
        dt = datetime.datetime.fromisoformat(exp)
        if (dt - now).days == 1:
            await telegram_app.bot.send_message(uid, "‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø—ñ–¥–ø–∏—Å–∫–∞.")
        if dt < now:
            remove_user(uid)

from uvicorn import Config, Server

async def main():
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help", help_cmd))
    telegram_app.add_handler(CommandHandler("myaccess", myaccess_cmd))
    telegram_app.add_handler(CommandHandler("admin", admin_cmd))
    telegram_app.add_handler(CommandHandler("ask", ask_cmd))
    telegram_app.add_handler(CommandHandler("testask", testask_cmd))
    telegram_app.add_handler(CommandHandler("price", price_cmd))
    telegram_app.add_handler(CallbackQueryHandler(handle_cb))
    telegram_app.job_queue.run_repeating(check_expiry, interval=3600)
    await telegram_app.initialize()

    config = Config(fastapi_app, host="0.0.0.0", port=8000)
    server = Server(config)

    await asyncio.gather(
        telegram_app.start(),
        server.serve()
    )

if __name__ == "__main__":
    asyncio.run(main())
