# bot.py

import asyncio
import datetime
import httpx
import logging
import requests
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from config import (
    BOT_TOKEN, TARIFFS, CRYPTO_PAY_TOKEN, CHANNEL_LINK, CHANNEL_CHAT_ID,
    OWNER_ID, BOT_USERNAME, CRYPTOPANIC_API_KEY
)
from db import add_or_update_user, get_user_profile, get_all_users, remove_user

logging.basicConfig(level=logging.INFO)

# üåê –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏
LANGUAGES = {
    "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English"
}

# üì¶ –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
TEXT = {
    "choose_lang": {
        "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "en": "Choose your language:"
    },
    "main_menu": {
        "uk": "–í—ñ—Ç–∞—é, {name}!\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        "ru": "–ü—Ä–∏–≤—ñ—Ç, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        "en": "Welcome, {name}!\nChoose an option:"
    },
    "buttons": {
        "access": {"uk": "üìä –ú—ñ–π –¥–æ—Å—Ç—É–ø", "ru": "üìä –ú–æ–π –¥–æ—Å—Ç—É–ø", "en": "üìä My Access"},
        "subscribe": {"uk": "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "ru": "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "en": "üîÅ Renew Subscription"},
        "news": {"uk": "üì∞ –ù–æ–≤–∏–Ω–∏", "ru": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "en": "üì∞ News"},
        "commands": {"uk": "üìå –ö–æ–º–∞–Ω–¥–∏", "ru": "üìå –ö–æ–º–∞–Ω–¥—ã", "en": "üìå Commands"},
    },
    "commands_list": {
        "uk": "üìå –ö–æ–º–∞–Ω–¥–∏:\n/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é\n/myaccess ‚Äî –º—ñ–π –¥–æ—Å—Ç—É–ø\n/profile ‚Äî –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç\n/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞",
        "ru": "üìå –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/myaccess ‚Äî –º–æ–π –¥–æ—Å—Ç—É–ø\n/profile ‚Äî –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n/admin ‚Äî –∞–¥–º–∏–Ω–∫–∞\n/help ‚Äî –ø–æ–º–æ—â—å",
        "en": "üìå Commands:\n/start ‚Äî main menu\n/myaccess ‚Äî my access\n/profile ‚Äî profile\n/admin ‚Äî admin panel\n/help ‚Äî help"
    },
    "choose_tariff": {
        "uk": "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:",
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        "en": "Choose a tariff:"
    },
    "pay_success": {
        "uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!",
        "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "en": "‚úÖ Access activated!"
    },
    "not_subscribed": {
        "uk": "‚ùå –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫–∞–Ω–∞–ª. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è: ",
        "ru": "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: ",
        "en": "‚ùå You are not subscribed. Subscribe: "
    },
    "access_status": {
        "uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω–∏–π\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {days}",
        "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}",
        "en": "‚úÖ Access active\nDays left: {days}"
    },
    "no_access": {
        "uk": "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.",
        "ru": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
        "en": "‚ùå You have no active subscription."
    }
}

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_languages = {}

def get_lang(user_id):
    return user_languages.get(user_id, "uk")

def t(user_id, key):
    lang = get_lang(user_id)
    return TEXT[key][lang]

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [[InlineKeyboardButton(name, callback_data=f"lang:{code}")] for code, name in LANGUAGES.items()]
    await update.message.reply_text(TEXT["choose_lang"]["uk"], reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("lang:"):
        lang = data.split(":")[1]
        user_languages[user_id] = lang
        name = query.from_user.first_name
        keyboard = [
            [InlineKeyboardButton(TEXT["buttons"]["access"][lang], callback_data="access")],
            [InlineKeyboardButton(TEXT["buttons"]["subscribe"][lang], callback_data="subscribe")],
            [InlineKeyboardButton(TEXT["buttons"]["news"][lang], callback_data="news")],
            [InlineKeyboardButton(TEXT["buttons"]["commands"][lang], callback_data="commands")]
        ]
        await query.edit_message_text(TEXT["main_menu"][lang].format(name=name), reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "subscribe":
        lang = get_lang(user_id)
        keyboard = [
            [InlineKeyboardButton(tariff["labels"][lang], callback_data=key)]
            for key, tariff in TARIFFS.items()
        ]
        await query.edit_message_text(TEXT["choose_tariff"][lang], reply_markup=InlineKeyboardMarkup(keyboard))

    elif data in TARIFFS:
        tariff = TARIFFS[data]
        amount = tariff["amount"]
        days = tariff["duration_days"]
        context.user_data["tariff_days"] = days

        payload = {
            "asset": "USDT",
            "amount": amount,
            "description": f"{days} days access",
            "paid_btn_name": "openBot",
            "paid_btn_url": f"https://t.me/{BOT_USERNAME}",
            "payload": f"{user_id}:{data}"
        }
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        response = requests.post("https://pay.crypt.bot/api/createInvoice", json=payload, headers=headers)
        result = response.json()
        if result.get("ok"):
            pay_url = result["result"]["pay_url"]
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_sub")]])
            await query.edit_message_text(f"üîó –û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{pay_url}", reply_markup=markup)
        else:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É")

    elif data == "check_sub":
        try:
            member = await context.bot.get_chat_member(chat_id=CHANNEL_CHAT_ID, user_id=user_id)
            if member.status in ["member", "administrator", "creator"]:
                days = context.user_data.get("tariff_days", 30)
                add_or_update_user(user_id, days)
                await query.edit_message_text(t(user_id, "pay_success"))
            else:
                raise Exception("Not subscribed")
        except:
            await query.edit_message_text(t(user_id, "not_subscribed") + CHANNEL_LINK)

    elif data == "access":
        user_data = get_user_profile(user_id)
        if user_data:
            expires = user_data[1]
            days_left = (datetime.datetime.fromisoformat(expires) - datetime.datetime.now()).days
            await query.edit_message_text(t(user_id, "access_status").format(days=days_left))
        else:
            await query.edit_message_text(t(user_id, "no_access"))

    elif data == "news":
        await send_news(context, user_id)

    elif data == "commands":
        await query.edit_message_text(TEXT["commands_list"][get_lang(user_id)])


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω
async def send_news(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    url = "https://cryptopanic.com/api/developer/v2/posts/"
    params = {"auth_token": CRYPTOPANIC_API_KEY, "public": "true", "kind": "news"}
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params)
        data = resp.json()
        posts = data.get("results", [])[:3]
        message = "üì∞ *–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:*\n\n" + "\n".join(
            [f"{i+1}. [{p['title']}]({p['url']})" for i, p in enumerate(posts)]
        )
        await context.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")

# /myaccess
async def myaccess_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_buttons(update, context)

# –ê–≤—Ç–æ—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
async def check_expiry(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now()
    for uid, expires in get_all_users():
        exp_dt = datetime.datetime.fromisoformat(expires)
        if (exp_dt - now).days == 1:
            try:
                await context.bot.send_message(chat_id=uid, text="‚ö†Ô∏è –ó–∞–≤—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø—ñ–¥–ø–∏—Å–∫–∞!")
            except:
                pass
        if exp_dt < now:
            remove_user(uid)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myaccess", myaccess_command))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.job_queue.run_repeating(check_expiry, interval=3600)
    print("‚úÖ Bot started")
    app.run_polling()
