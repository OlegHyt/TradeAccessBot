import os
import asyncio
import datetime
import logging
import requests
import httpx
import openai
import uvicorn
import sqlite3
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, ConversationHandler
)

load_dotenv()

# ================== –ö–ª—é—á—ñ —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
CRYPTOPANIC_API_KEY = os.getenv("CRYPTOPANIC_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CRYPTO_PAY_TOKEN = os.getenv("CRYPTO_PAY_TOKEN")
CHANNEL_CHAT_ID = int(os.getenv("CHANNEL_CHAT_ID", "0"))
CHANNEL_LINK = os.getenv("CHANNEL_LINK")

# –ü—Ä–∏–∫–ª–∞–¥ —Ç–∞—Ä–∏—Ñ—ñ–≤ ‚Äî –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—ó
TARIFFS = {
    "month": {"duration_days": 30, "amount": 10, "labels": {"uk": "–ú—ñ—Å—è—á–Ω–∞", "ru": "–ú–µ—Å—è—á–Ω–∞—è", "en": "Monthly"}},
    "year": {"duration_days": 365, "amount": 100, "labels": {"uk": "–†—ñ—á–Ω–∞", "ru": "–ì–æ–¥–æ–≤–∞—è", "en": "Yearly"}},
}

openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
fastapi_app = FastAPI()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –¥–ª—è GPT –ª—ñ–º—ñ—Ç—ñ–≤
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS gpt_usage (
    user_id INTEGER,
    date TEXT,
    prompt TEXT,
    tokens INTEGER DEFAULT 0
)
""")
conn.commit()

# ================== –Ü–º–ø–æ—Ä—Ç —Å–≤–æ—ó—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ==================
from db import add_or_update_user, get_user_profile, get_all_users, remove_user

# ================== –¢–µ–∫—Å—Ç–∏ —ñ –º–æ–≤–∏ ==================
LANGUAGES = {"uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}

TEXT = {
    "choose_lang": {
        "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", "en": "Choose your language:"
    },
    "main_menu": {
        "uk": "–í—ñ—Ç–∞—é, {name}!\n–û–±–µ—Ä—ñ—Ç—å:", "ru": "–ü—Ä–∏–≤–µ—Ç, {name}!\n–í—ã–±–µ—Ä–∏—Ç–µ:", "en": "Welcome, {name}!\nChoose:"
    },
    "buttons": {
        "access": {"uk": "üìä –ú—ñ–π –¥–æ—Å—Ç—É–ø", "ru": "üìä –ú–æ–π –¥–æ—Å—Ç—É–ø", "en": "üìä My Access"},
        "subscribe": {"uk": "üîÅ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", "ru": "üîÅ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "en": "üîÅ Renew Subscription"},
        "freetrial": {"uk": "üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É", "ru": "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 1 —á–∞—Å", "en": "üéÅ Free 1-hour trial"},
        "news": {"uk": "üì∞ –ù–æ–≤–∏–Ω–∏", "ru": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "en": "üì∞ News"},
        "commands": {"uk": "üìå –ö–æ–º–∞–Ω–¥–∏", "ru": "üìå –ö–æ–º–∞–Ω–¥—ã", "en": "üìå Commands"},
        "gpt": {"uk": "üß† GPT", "ru": "üß† GPT", "en": "üß† GPT"},
        "weather": {"uk": "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞", "ru": "‚òÄÔ∏è –ü–æ–≥–æ–¥–∞", "en": "‚òÄÔ∏è Weather"},
        "prices": {"uk": "üí± –ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç", "ru": "üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "en": "üí± Prices"},
        "admin": {"uk": "‚öôÔ∏è –ê–¥–º—ñ–Ω", "ru": "‚öôÔ∏è –ê–¥–º–∏–Ω", "en": "‚öôÔ∏è Admin"},
        "back": {"uk": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "en": "‚¨ÖÔ∏è Back"},
        "cancel": {"uk": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "ru": "‚ùå –û—Ç–º–µ–Ω–∞", "en": "‚ùå Cancel"},
    },
    "commands_list": {
        "uk": "/start ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é\n/myaccess ‚Äî –º—ñ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥–∏\n/admin ‚Äî –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ (–∞–¥–º—ñ–Ω)\n/price ‚Äî —Ü—ñ–Ω–∏\n/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–Ω–µ—Ç—ñ\n/broadcast ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ (admin)",
        "ru": "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/myaccess ‚Äî –º–æ–π –¥–æ—Å—Ç—É–ø\n/help ‚Äî –∫–æ–º–∞–Ω–¥—ã\n/admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n/ask ‚Äî GPT\n/testask ‚Äî —Ç–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞\n/price ‚Äî —Ü–µ–Ω—ã\n/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ–Ω–µ—Ç–µ\n/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞",
        "en": "/start ‚Äî main menu\n/myaccess ‚Äî my access\n/help ‚Äî commands\n/admin ‚Äî admin panel\n/ask ‚Äî GPT\n/testask ‚Äî admin test\n/price ‚Äî prices\n/predict ‚Äî coin forecast\n/broadcast ‚Äî broadcast"
    },
    "choose_tariff": {"uk": "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", "en": "Choose tariff:"},
    "pay_success": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", "en": "‚úÖ Access activated!"},
    "not_subscribed": {"uk": "‚ùå –ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è: ", "ru": "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: ", "en": "‚ùå Not subscribed. Subscribe: "},
    "access_status": {"uk": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–Ω–∏–π, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {days} –¥–Ω—ñ–≤", "ru": "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π", "en": "‚úÖ Access active, {days} days left"},
    "no_access": {"uk": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.", "ru": "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.", "en": "‚ùå No active subscription."},
    "predict_usage": {"uk": "üìä –ù–∞–ø–∏—à—ñ—Ç—å /predict BTCUSDT", "ru": "üìä –ù–∞–ø–∏—à–∏—Ç–µ /predict BTCUSDT", "en": "üìä Write /predict BTCUSDT"},
    "predict_error": {"uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É.", "ru": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.", "en": "‚ùå Forecast error."},
    "gpt_limit": {"uk": "‚ö†Ô∏è –í–∏—á–µ—Ä–ø–∞–Ω–æ 5 –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.", "ru": "‚ö†Ô∏è –õ–∏–º–∏—Ç 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.", "en": "‚ö†Ô∏è You used 5 GPT requests today."},
    "news_not_implemented": {"uk": "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø–æ–∫–∏ —â–æ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ.", "ru": "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.", "en": "üì∞ Latest news not implemented yet."},
    "weather_prompt": {"uk": "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ–≥–æ–¥–∏:", "ru": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã:", "en": "Enter city name for weather:"},
    "weather_error": {"uk": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É.", "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.", "en": "‚ùå Could not get weather."},
    "broadcast_usage": {"uk": "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", "ru": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", "en": "Enter text for broadcast:"},
    "broadcast_sent": {"uk": "‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞.", "ru": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", "en": "‚úÖ Broadcast sent."},
    "cancelled": {"uk": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", "ru": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", "en": "‚ùå Cancelled."},
    "gpt_prompt": {"uk": "üß† –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –¥–æ GPT:", "ru": "üß† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ GPT:", "en": "üß† Enter your GPT query:"},
    "processing": {"uk": "‚è≥ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...", "ru": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...", "en": "‚è≥ Processing request..."},
    "gpt_error": {"uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.", "ru": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", "en": "‚ùå Processing error."},
}

user_lang = {}
def lang(uid): return user_lang.get(uid, "uk")
def tr(uid, key): return TEXT[key][lang(uid)]

# ================== GPT Usage ==================
def can_use_gpt(uid):
    today = datetime.date.today().isoformat()
    cursor.execute("SELECT COUNT(*) FROM gpt_usage WHERE user_id=? AND date=?", (uid, today))
    count = cursor.fetchone()[0]
    return count < 5

def log_gpt_usage(uid, prompt, tokens=0):
    today = datetime.date.today().isoformat()
    cursor.execute("INSERT INTO gpt_usage (user_id, date, prompt, tokens) VALUES (?, ?, ?, ?)", (uid, today, prompt, tokens))
    conn.commit()

# ================== Conversation states ==================
ASK_GPT = 1
ASK_WEATHER = 2
BROADCAST = 3

# ================== –û—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ ==================

@fastapi_app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    if "payload" in data:
        uid, key = data["payload"].split(":")
        add_or_update_user(int(uid), TARIFFS[key]["duration_days"])
        return {"ok": True}
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton(name, callback_data=f"lang:{code}")] for code, name in LANGUAGES.items()]
    await update.message.reply_text(TEXT["choose_lang"]["uk"], reply_markup=InlineKeyboardMarkup(kb))

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await update.message.reply_text(TEXT["commands_list"][lang(uid)])

async def myaccess_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid == OWNER_ID:
        await update.message.reply_text(tr(uid, "access_status").format(days=9999) + " (–ê–¥–º—ñ–Ω, –±–µ–∑–ª—ñ–º—ñ—Ç)")
        return
    row = get_user_profile(uid)
    if row:
        days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
        if days < 0:
            await update.message.reply_text(tr(uid, "no_access"))
        else:
            await update.message.reply_text(tr(uid, "access_status").format(days=days))
    else:
        await update.message.reply_text(tr(uid, "no_access"))

async def admin_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != OWNER_ID:
        return await update.message.reply_text("‚õî Access denied.")
    users = get_all_users()
    now = datetime.datetime.now()
    active = sum(1 for _, e in users if datetime.datetime.fromisoformat(e) > now)
    inactive = len(users) - active
    msg = f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active}\n‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {inactive}"
    await update.message.reply_text(msg)

# ================== Menu Handlers ==================

async def main_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    code = lang(uid)
    kb = [
        [InlineKeyboardButton(TEXT["buttons"]["access"][code], callback_data="access"),
         InlineKeyboardButton(TEXT["buttons"]["subscribe"][code], callback_data="subscribe")],
        [InlineKeyboardButton(TEXT["buttons"]["freetrial"][code], callback_data="freetrial"),
         InlineKeyboardButton(TEXT["buttons"]["news"][code], callback_data="news")],
        [InlineKeyboardButton(TEXT["buttons"]["gpt"][code], callback_data="gpt"),
         InlineKeyboardButton(TEXT["buttons"]["weather"][code], callback_data="weather")],
        [InlineKeyboardButton(TEXT["buttons"]["prices"][code], callback_data="prices")],
    ]
    if uid == OWNER_ID:
        kb.append([InlineKeyboardButton(TEXT["buttons"]["admin"][code], callback_data="admin")])
    await update.message.reply_text(TEXT["main_menu"][code].format(name=update.effective_user.first_name), reply_markup=InlineKeyboardMarkup(kb))

# ================== Callback Query Handler ==================

async def handle_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = q.data
    code = lang(uid)

    if data.startswith("lang:"):
        code = data.split(":")[1]
        user_lang[uid] = code
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await q.edit_message_text(TEXT["main_menu"][code].format(name=q.from_user.first_name), reply_markup=main_menu_kb(code, uid))

    elif data == "access":
        row = get_user_profile(uid)
        if uid == OWNER_ID:
            await q.edit_message_text(tr(uid, "access_status").format(days=9999) + " (–ê–¥–º—ñ–Ω, –±–µ–∑–ª—ñ–º—ñ—Ç)")
            return
        if row:
            days = (datetime.datetime.fromisoformat(row[1]) - datetime.datetime.now()).days
            if days < 0:
                await q.edit_message_text(tr(uid, "no_access"))
            else:
                await q.edit_message_text(tr(uid, "access_status").format(days=days))
        else:
            await q.edit_message_text(tr(uid, "no_access"))

    elif data == "subscribe":
        kb = [[InlineKeyboardButton(TARIFFS[k]["labels"][code], callback_data=f"tariff:{k}")] for k in TARIFFS]
        kb.append([InlineKeyboardButton(TEXT["buttons"]["back"][code], callback_data="back_to_main")])
        await q.edit_message_text(tr(uid, "choose_tariff"), reply_markup=InlineKeyboardMarkup(kb))

    elif data.startswith("tariff:"):
    tariff_key = data.split(":")[1]
    t = TARIFFS[tariff_key]
    resp = requests.post("https://pay.crypt.bot/api/createInvoice", json={
        "asset": "USDT", "amount": t["amount"],
        "description": f"{t['duration_days']} days",
        "paid_btn_name": "openBot",
        "paid_btn_url": f"https://t.me/{BOT_USERNAME}",
        "payload": f"{uid}:{tariff_key}"
    }, headers={"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN})

    rj = resp.json()
    if rj.get("ok"):
        url = rj["result"]["pay_url"]
        kb = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤", callback_data="check_payment")],
            [InlineKeyboardButton(TEXT["buttons"]["back"][lang(uid)], callback_data="back_to_main")]
        ]
        await q.edit_message_text(f"üí≥ –û–ø–ª–∞—Ç—ñ—Ç—å —Ç—É—Ç:\n{url}", reply_markup=InlineKeyboardMarkup(kb))
    else:
        await q.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")

elif data == "check_payment":
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —É—á–∞—Å–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª—É
        m = await ctx.bot.get_chat_member(CHANNEL_CHAT_ID, uid)
        if m.status in ["member", "administrator", "creator"]:
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
            add_or_update_user(uid, TARIFFS["month"]["duration_days"])  # –∞–±–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑ user_data
            await q.edit_message_text(tr(uid, "pay_success"))
        else:
            raise Exception()
    except Exception:
        await q.edit_message_text(tr(uid, "not_subscribed") + CHANNEL_LINK)


    else:
        await q.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")

import logging
import sqlite3
import datetime
import requests
import httpx
import asyncio
import threading
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, Text
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from fastapi import FastAPI
import openai
import uvicorn
import secrets
import stripe
import os
from dotenv import load_dotenv

# ================== .env ==================
load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME")
CRYPTO_PAY_TOKEN = os.getenv("CRYPTO_PAY_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_CHAT_ID")
CHANNEL_LINK = os.getenv("CHANNEL_LINK")
OWNER_ID = int(os.getenv("OWNER_ID"))
CRYPTOPANIC_API_KEY = os.getenv("CRYPTOPANIC_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
STRIPE_API_KEY = os.getenv("STRIPE_API_KEY", "sk_test_...your_default")

stripe.api_key = STRIPE_API_KEY
openai.api_key = OPENAI_API_KEY

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()
fastapi_app = FastAPI()

# ================== SQLite ==================

conn = sqlite3.connect("bot.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    usage INTEGER DEFAULT 0,
    expires TEXT,
    referrals INTEGER DEFAULT 0,
    coins TEXT DEFAULT "BTC,ETH",
    referred_by INTEGER
)
""")
c.execute("CREATE TABLE IF NOT EXISTS gpt_log (user_id INTEGER, question TEXT, timestamp TEXT)")
conn.commit()

# ================== –î–æ–ø–æ–º—ñ–∂–Ω—ñ ==================

def get_user(uid):
    c.execute("SELECT * FROM users WHERE id = ?", (uid,))
    return c.fetchone()

def add_user(uid, ref=None):
    if not get_user(uid):
        now = datetime.datetime.now() + datetime.timedelta(hours=1)
        c.execute("INSERT INTO users (id, usage, expires, referred_by) VALUES (?, ?, ?, ?)", (uid, 0, now.isoformat(), ref))
        if ref:
            c.execute("UPDATE users SET referrals = referrals + 1 WHERE id = ?", (ref,))
        conn.commit()

def log_usage(uid, text):
    now = datetime.datetime.now().isoformat()
    c.execute("INSERT INTO gpt_log VALUES (?, ?, ?)", (uid, text, now))
    c.execute("UPDATE users SET usage = usage + 1 WHERE id = ?", (uid,))
    conn.commit()

def can_use_gpt(uid):
    c.execute("SELECT usage FROM users WHERE id = ?", (uid,))
    row = c.fetchone()
    return row and row[0] < 5

def reset_usage():
    c.execute("UPDATE users SET usage = 0")
    conn.commit()

def get_top_users():
    c.execute("SELECT id, usage FROM users ORDER BY usage DESC LIMIT 5")
    return c.fetchall()

# ================== FSM ==================

class GPTState(StatesGroup):
    query = State()

class WeatherState(StatesGroup):
    city = State()

# ================== –ö–Ω–æ–ø–∫–∏ ==================

def main_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="GPT", callback_data="gpt"), InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="–ù–æ–≤–∏–Ω–∏", callback_data="news"), InlineKeyboardButton(text="–¶—ñ–Ω–∏", callback_data="prices")],
        [InlineKeyboardButton(text="–ì—Ä–∞—Ñ—ñ–∫ BTC", callback_data="graph_BTCUSDT"), InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ BTC", callback_data="predict_BTCUSDT")],
        [InlineKeyboardButton(text="–ú–æ—ó –º–æ–Ω–µ—Ç–∏", callback_data="my_coins"), InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –º–æ–Ω–µ—Ç—É", callback_data="add_coin")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", callback_data="pay"), InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="referral")],
    ])
    return kb

# ================== Callback ==================

@dp.callback_query(Text(startswith="gpt"))
async def handle_gpt(callback: types.CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    add_user(uid)
    if not can_use_gpt(uid):
        await callback.message.answer("–í–∏ –≤–∏—á–µ—Ä–ø–∞–ª–∏ 5 –∑–∞–ø–∏—Ç—ñ–≤ GPT –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")
        return
    await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ GPT:")
    await state.set_state(GPTState.query)
    await callback.answer()

@dp.message(GPTState.query)
async def gpt_query(msg: types.Message, state: FSMContext):
    uid = msg.from_user.id
    if not get_user(uid):
        add_user(uid)
    if can_use_gpt(uid):
        await msg.answer("–û–±—Ä–æ–±–ª—è—é GPT...")
        try:
            res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": msg.text}])
            text = res.choices[0].message.content
            log_usage(uid, msg.text)
            await msg.answer(text[:4000])
        except Exception as e:
            await msg.answer("–ü–æ–º–∏–ª–∫–∞ GPT")
            logging.error(e)
    await state.clear()

@dp.callback_query(Text(startswith="weather"))
async def weather(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞")
    await state.set_state(WeatherState.city)
    await callback.answer()

@dp.message(WeatherState.city)
async def weather_msg(msg: types.Message, state: FSMContext):
    city = msg.text
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ua"
    r = requests.get(url).json()
    if r.get("cod") != 200:
        await msg.answer("–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    w = r["weather"][0]["description"].capitalize()
    t = r["main"]["temp"]
    h = r["main"]["humidity"]
    await msg.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n{w}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t}¬∞C\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {h}%")
    await state.clear()

@dp.callback_query(Text(startswith="news"))
async def news(callback: types.CallbackQuery):
    async with httpx.AsyncClient() as cli:
        r = await cli.get("https://cryptopanic.com/api/developer/v2/posts/?auth_token=" + CRYPTOPANIC_API_KEY)
        posts = r.json().get("results", [])[:5]
        text = "\n".join(f"{i+1}. {p['title']}" for i, p in enumerate(posts))
        await callback.message.answer("üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏:\n" + text)
    await callback.answer()

@dp.callback_query(Text(startswith="prices"))
async def prices(callback: types.CallbackQuery):
    r = requests.get("https://api.binance.com/api/v3/ticker/price?symbols=[\"BTCUSDT\",\"ETHUSDT\"]")
    data = r.json()
    msg = "\n".join(f"{d['symbol']}: {d['price']}" for d in data)
    await callback.message.answer(msg)
    await callback.answer()

@dp.callback_query(Text(startswith="predict_"))
async def predict(callback: types.CallbackQuery):
    symbol = callback.data.split("_")[1]
    r = requests.get(f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}").json()
    prompt = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {symbol}:\n–¶—ñ–Ω–∞: {r['lastPrice']}, –ó–º—ñ–Ω–∞: {r['priceChangePercent']}%, –û–± º—î–º: {r['volume']}"
    res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
    await callback.message.answer(res.choices[0].message.content[:4000])
    await callback.answer()

@dp.callback_query(Text(startswith="graph_"))
async def graph(callback: types.CallbackQuery):
    symbol = callback.data.split("_")[1]
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval=1h&limit=24"
    r = requests.get(url).json()
    prices = [float(i[4]) for i in r]
    plt.figure(figsize=(8, 4))
    plt.plot(prices)
    plt.title(f"–ì—Ä–∞—Ñ—ñ–∫ {symbol}")
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await bot.send_photo(callback.from_user.id, photo=buf)
    await callback.answer()

@dp.callback_query(Text(startswith="pay"))
async def pay(callback: types.CallbackQuery):
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[{
            "price_data": {
                "currency": "usd",
                "product_data": {"name": "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ GPT"},
                "unit_amount": 300,
            },
            "quantity": 1,
        }],
        mode="payment",
        success_url=f"https://t.me/{BOT_USERNAME}?start=success",
        cancel_url=f"https://t.me/{BOT_USERNAME}?start=cancel",
    )
    await callback.message.answer(f"–û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {session.url}")
    await callback.answer()

@dp.callback_query(Text(startswith="referral"))
async def referral(callback: types.CallbackQuery):
    uid = callback.from_user.id
    await callback.message.answer(f"–í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\nhttps://t.me/{BOT_USERNAME}?start={uid}")
    await callback.answer()

# ================== –ê–≤—Ç–æ—Ñ—É–Ω–∫—Ü—ñ—ó ==================

async def auto_news():
    async with httpx.AsyncClient() as cli:
        r = await cli.get("https://cryptopanic.com/api/developer/v2/posts/?auth_token=" + CRYPTOPANIC_API_KEY)
        posts = r.json().get("results", [])[:3]
        text = "üì∞ –ù–æ–≤–∏–Ω–∏:\n" + "\n".join(f"{i+1}. {p['title']}" for i, p in enumerate(posts))
        await bot.send_message(CHANNEL_ID, text)

async def auto_predict():
    symbols = ["BTCUSDT", "ETHUSDT"]
    for symbol in symbols:
        r = requests.get(f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}").json()
        prompt = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {symbol}:\n–¶—ñ–Ω–∞: {r['lastPrice']}, –ó–º—ñ–Ω–∞: {r['priceChangePercent']}%, –û–± º—î–º: {r['volume']}"
        res = openai.ChatCompletion.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
        await bot.send_message(CHANNEL_ID, res.choices[0].message.content[:4000])

# ================== –ó–∞–ø—É—Å–∫ ==================

def run():
    scheduler.add_job(auto_news, "interval", hours=1)
    scheduler.add_job(auto_predict, "interval", minutes=30)
    scheduler.add_job(reset_usage, "cron", hour=0)
    scheduler.start()
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    threading.Thread(target=lambda: uvicorn.run(fastapi_app, host="0.0.0.0", port=8000)).start()
    run()


